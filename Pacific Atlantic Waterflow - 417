class Solution {
public:
    
    void dfs(vector<vector<int>>& heights, int r, int c, int prev , vector<vector<int>>& ocean)
    {
        int row = heights.size();
        int col = heights[0].size();
        
        if(r<0 ||c<0 ||r>=row ||c>=col)
        {
            return;
        }
        
        if(heights[r][c]<prev)
        {
            return;
        }
        
        if(ocean[r][c]==-1)
        {
            return ;
        }
        
        ocean[r][c] = -1;
        
        dfs(heights, r+1,c,heights[r][c],ocean);
         dfs(heights, r-1,c,heights[r][c],ocean);
         dfs(heights, r,c+1,heights[r][c],ocean);
         dfs(heights, r,c-1,heights[r][c],ocean);
        
    }
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        
        vector<vector<int>>ans;
        
        if(heights.size()==0)
        {
            return ans;
        }
        
        int m =heights.size();
        int n= heights[0].size();
        
        vector<vector<int>> pacific(m,vector<int>(n,0));
        vector<vector<int>> atlantic(m,vector<int>(n,0));
        
        
        for( int col = 0;col<n ;col++)
        {
            dfs(heights,0, col, INT_MIN, pacific);
             dfs(heights,m-1, col, INT_MIN, atlantic);
            
        }
        
        for( int row =0;row<m;row++)
        {
             dfs(heights,row, 0, INT_MIN, pacific);
              dfs(heights,row, n-1, INT_MIN, atlantic);
            
        }
        vector<int>v;
        
        for( int i=0;i<m;i++)
        {
            for( int j=0;j<n;j++)
            {
                if(pacific[i][j]==-1 &&  pacific[i][j] ==atlantic[i][j])
                {
                     v.clear();
                v.push_back(i);
                  v.push_back(j);
                ans.push_back(v);
                    
                }
              
            }
        }
        return ans;
        
    }
};
