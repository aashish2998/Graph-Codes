struct Point
{
    int x;
    int y;
    int cnt;
    Point ( int x, int y, int cnt)
    {
        this->x =x;
        this->y =y;
        this->cnt = cnt;
    }
};
class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int row = grid.size();
        int col = grid[0].size();
        
        if(grid[0][0]==1 || grid[row-1][col-1]==1)
            return -1;
        
       
        
        queue<Point>q;
       
        q.push({0,0,1});
        grid[0][0]=1;
        
        int dx[8]={-1 , -1 , 1 ,1  , 1 , -1 , 0 , 0};
         int dy[8]={-1 ,1 , 1 , -1 , 0 , 0 , 1 , -1 };
        while(!q.empty())
        {
            int size = q.size();
          
            
            while(size-- >0)
            {
                 Point point =  q.front();
                q.pop();
                
                if(point.x==row-1 && point.y ==col-1)
                    return point.cnt;
                
                
                for(int i =0;i<8;i++)
                {
                    int r =point.x +dx[i];
                    int c = point.y+dy[i];
                    
                    if( r>=0 && c>=0 && r<row && c<col && grid[r][c]==0)
                    {
                        q.push({r,c,point.cnt+1});
                        grid[r][c]=1;
                    }
                }
            }
        }
        return -1;
    }
};
